{"version":3,"sources":["setting.tsx","pieces/piece.tsx","pieces/pawn.tsx","pieces/lance.tsx","pieces/knight.tsx","pieces/silver.tsx","pieces/gold.tsx","pieces/bishop.tsx","pieces/rook.tsx","pieces/king.tsx","pieces/mt.tsx","board.tsx","material/confirm.tsx","material/alert.tsx","game.tsx","index.tsx"],"names":["Setting","LENGTH","UNCLICKED","WHITE","MT","PIECES","NUM","Piece","_out","_turn","_piece_num","this","Pawn","Lance","Knight","Silver","Gold","Bishop","Rook","King","Mt","Square","props","class_string","is_captured","is_mobile","is_black","is_final","is_clicked","can_control","className","onClick","value","Board","i","j","x","Math","floor","y","key","squares","out","turn","content","control_piece","push","renderSquare","final_piece","clicked_piece","items","Array","concat","React","Component","Captured","num","Confirm","Dialog","disableBackdropClick","disableEscapeKeyDown","open","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","message","DialogActions","Button","handleYes","color","handleNo","Alert","onClose","handleClose","style","whiteSpace","make_board","sfen","set_piece","n","piece","set_pieces","fill","set_control_piece","flag","control_pos_sub","control_pos","pos","kingx","kingy","check_king","piece_num","dx","dy","length","xx","yy","check","atc_controls","cnt","mate","captured","tmp_pos","_","cloneDeep","atc","atcx","atcy","tmp_controls","abs","can_move","nifu","bfr_pos","cur_pos","Game","state","start_pos","start_black_piece","start_white_piece","current_pos","current_black_piece","current_white_piece","kifu","moves","moves_sub","moves_max","black_name","white_name","moved_piece","promotion","resign","result","is_online","handlePromotion","bind","handleResign","handleResultClose","tmp_control_piece","setState","tmp_black_piece","tmp_white_piece","is_promoted","promote","setTimeout","tmp_control_pos","target_moves","cur","idx","promoted_flag","game","legend","font_size","button_size","back10","variant","setBoard","fontSize","disabled","back1","forward1","forwad10","size","rotate","handleClick","ua","navigator","userAgent","toLowerCase","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3c57d22.chunk.js","sourcesContent":["export class Setting{\n  // 盤の列数（行数）\n  public static LENGTH: number = 9;\n  public static UNCLICKED: number = 81 + 14;\n  public static WHITE: number = 7;\n  public static MT: number = 16;\n  public static PIECES: string[] = [\"飛\", \"角\", \"金\", \"銀\", \"桂\", \"香\", \"歩\", \"玉\", \"竜\", \"馬\", \"\", \"全\", \"圭\", \"杏\", \"と\", \"\"];\n  public static NUM: string[] = [\"\", \"\", \"ニ\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\", \"十一\", \"十二\", \"十三\", \"十四\", \"十五\", \"十六\", \"十七\", \"十八\"];\n}\n","import { Setting } from \"../setting\";\n\nexport abstract class Piece{\n  // 出力する文字\n  private _out: string;\n  // 先手の駒か\n  private _turn: boolean;\n  // 駒番号\n  private _piece_num: number;\n\n  constructor(_out: string, _turn: boolean, _piece_num: number){\n    this._out = _out;\n    this._turn = _turn;\n    this._piece_num = _piece_num;\n  }\n\n  public out(): string{\n    return this._out;\n  }\n  public turn(): boolean{\n    return this._turn;\n  }\n  public piece_num(): number{\n    return this._piece_num;\n  }\n  public promote(): void{\n    this._piece_num += Setting.MT / 2;\n    this._out = Setting.PIECES[this._piece_num];\n  }\n\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Pawn extends Piece{\n  constructor(_turn: boolean, _piece_num: number=6){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Lance extends Piece{\n  constructor(_turn: boolean, _piece_num: number=5){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Knight extends Piece{\n  constructor(_turn: boolean, _piece_num: number=4){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Silver extends Piece{\n  constructor(_turn: boolean, _piece_num: number=3){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Gold extends Piece{\n  constructor(_turn: boolean, _piece_num: number=2){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Bishop extends Piece{\n  constructor(_turn: boolean, _piece_num: number=1){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class Rook extends Piece{\n  constructor(_turn: boolean, _piece_num: number=0){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Setting} from '../setting';\nimport {Piece} from './piece';\n\nexport class King extends Piece{\n  constructor(_turn: boolean, _piece_num: number=7){\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\n  }\n}\n","import {Piece} from './piece';\n\nexport class Mt extends Piece{\n  constructor(_turn: boolean=true, _piece_num: number=16){\n    super(' ', _turn, _piece_num);\n  }\n}\n","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css';\nimport {Setting} from \"./setting\";\nimport {Piece} from './pieces/piece';\n// import { Pawn } from \"./pieces/pawn\";\n// import { Mt } from \"./pieces/mt\";\n// import {Game} from './game';\n\ninterface ISquareProps{\n  is_final: boolean;\n  is_clicked: boolean;\n  value: string;\n  is_black: boolean;\n  is_captured: boolean;\n  can_control: boolean;\n  onClick: () => void;\n  is_mobile: boolean;\n}\n\nfunction Square(props: ISquareProps){\n  let class_string: string = \"\";\n  if(props.is_captured){\n    class_string = (props.is_mobile ? \"mobile-captured\" : \"captured\");\n  }\n  else{\n    class_string = (props.is_mobile ? \"mobile-square piece\" : \"square piece\");\n    if(!props.is_black){\n      class_string = class_string + \" white\";\n    }\n  }\n  if(props.is_final){\n    class_string = class_string + \" final\";\n  }\n  if(props.is_clicked){\n    class_string = class_string + \" click\";\n  }\n  if(props.can_control){\n    class_string = class_string + \" attack\";\n  }\n  return (\n    <button\n      className={class_string}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\ninterface IBoardProps {\n  squares: Piece[][];\n  onClick: (i: number) => void;\n  clicked_piece: number;\n  control_piece: boolean[][];\n  final_piece: number;\n  is_mobile: boolean;\n}\n\ninterface IBoardState {\n  squares: Piece[][];\n  onClick: (i: number) => void;\n  clicked_piece: number;\n  control_piece: boolean[][];\n  final_piece: number;\n}\n\nexport class Board extends React.Component<IBoardProps, IBoardState> {\n\n  renderSquare(is_final: boolean, is_clicked: boolean, can_control: boolean, i: number) {\n    let j = i - Setting.WHITE * 2;\n    let x: number = Math.floor(j / Setting.LENGTH);\n    let y: number = j % Setting.LENGTH;\n    return (\n      <Square\n        key={i}\n        is_final={is_final}\n        is_clicked={is_clicked}\n        value={this.props.squares[x][y].out()}\n        is_black={this.props.squares[x][y].turn()}\n        is_captured={false}\n        can_control={can_control}\n        onClick={() => this.props.onClick(i)}\n        is_mobile={this.props.is_mobile}\n      />\n    );\n  }\n\n  content(y: number){\n    let content = [];\n    for(let x = Setting.LENGTH - 1; x >= 0; --x){\n      if(this.props.control_piece[x][y]){\n        content.push(this.renderSquare(false, false, true, x * Setting.LENGTH + y + Setting.WHITE * 2));\n      }\n      else if(x * Setting.LENGTH + y === this.props.final_piece - Setting.WHITE * 2){\n        content.push(this.renderSquare(true, false, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\n      }\n      else if(x * Setting.LENGTH + y === this.props.clicked_piece - Setting.WHITE * 2){\n        content.push(this.renderSquare(false, true, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\n      }\n      else{\n        content.push(this.renderSquare(false, false, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\n      }\n    }\n    return content;\n  }\n\n  render() {\n    let items = new Array<JSX.Element>();\n    for(let y = 0; y < Setting.LENGTH; ++y){\n      items = items.concat(<div className=\"board-row ley\" key={y}>{this.content(y)}</div>);\n    }\n\n    return (\n      <div>\n        {/* <div className=\"status\">{status}</div> */}\n        {items}\n      </div>\n    );\n  }\n}\n\ninterface ICapturedProps {\n  squares: number[];\n  clicked_piece: number;\n  is_black: boolean;\n  turn: boolean;\n  onClick: (i: number) => void;\n  is_mobile: boolean;\n}\n\ninterface ICapturedState {\n  squares: number[];\n  clicked_piece: number;\n  is_black: boolean;\n  turn: boolean;\n  onClick: (i: number) => void;\n}\n\nexport class Captured extends React.Component<ICapturedProps, ICapturedState> {\n\n  renderSquare(is_clicked: boolean, i: number) {\n    return (\n      <Square\n        key={i}\n        is_final={false}\n        is_clicked={is_clicked}\n        value={Setting.PIECES[i]}\n        is_black={this.props.is_black}\n        is_captured={true}\n        can_control={false}\n        onClick={(this.props.is_black ? () => this.props.onClick(i) : () => this.props.onClick(i + Setting.WHITE))}\n        is_mobile={this.props.is_mobile}\n      />\n    );\n  }\n\n  render() {\n    let items = new Array<JSX.Element>();\n    const clicked_piece: number = (this.props.turn ? this.props.clicked_piece : this.props.clicked_piece - Setting.WHITE);\n    const is_black: boolean = this.props.is_black;\n    const turn: boolean = this.props.turn;\n    for(let i = 0; i < Setting.WHITE; ++i){\n      let num = this.props.squares[i];\n      if(num > 0){\n        if(i === clicked_piece && is_black === turn){\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(true, i)}</div>);\n        }\n        else{\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(false, i)}</div>);\n        }\n        if(num > 1){\n          items = items.concat(<div className=\"board-row ley\" key={\"num\"+i}>{\n            <button\n              className={\"number\"}\n            >\n            {Setting.NUM[num]}\n            </button>\n          }</div>);\n        }\n      }\n    }\n\n    return (\n      <div>\n        {items}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IConfirmProps{\n  title: string;\n  message: string;\n  open: boolean;\n  handleYes: () => void;\n  handleNo: () => void;\n}\n\nexport default function Confirm(props: IConfirmProps) {\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Open alert dialog\n      </Button> */}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={props.open}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {props.message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleYes} color=\"primary\">\n            はい\n          </Button>\n          <Button onClick={props.handleNo} color=\"primary\">\n            いいえ\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface IConfirmProps{\n  title: string;\n  message: string;\n  open: boolean;\n  handleClose: () => void;\n}\n\nexport default function Alert(props: IConfirmProps) {\n\n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        onClose={props.handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\" style={{whiteSpace: 'pre-line'}}>\n            {props.message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport './index.css';\nimport {Setting} from \"./setting\";\nimport {Piece} from './pieces/piece';\nimport { Pawn } from \"./pieces/pawn\";\nimport { Lance } from \"./pieces/lance\";\nimport { Knight } from \"./pieces/knight\";\nimport { Silver } from \"./pieces/silver\";\nimport { Gold } from \"./pieces/gold\";\nimport { Bishop } from \"./pieces/bishop\";\nimport { Rook } from \"./pieces/rook\";\nimport { King } from \"./pieces/king\";\nimport { Mt } from \"./pieces/mt\";\nimport {Board, Captured} from './board';\nimport _ from 'lodash';\nimport Confirm from './material/confirm'\nimport Alert from './material/alert'\nimport Button from '@material-ui/core/Button';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIosSharp';\nimport Replay10OutlinedIcon from '@material-ui/icons/Replay10Outlined';\nimport Forward10OutlinedIcon from '@material-ui/icons/Forward10Outlined';\n\nexport function make_board(sfen=\"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\", language='Ja'): Piece[][]{\n  let squares: Piece[][] = [];\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    squares[i] = [];\n    for(let j = 0; j < Setting.LENGTH; ++j){\n      squares[i].push(new Mt());\n    }\n  }\n  if(sfen === \"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\"){\n    for(let i = 0; i < Setting.LENGTH; ++i){\n      squares[i][2] = new Pawn(false);\n      squares[i][6] = new Pawn(true);\n    }\n    squares[0][0] = new Lance(false);\n    squares[8][0] = new Lance(false);\n    squares[0][8] = new Lance(true);\n    squares[8][8] = new Lance(true);\n\n    squares[1][0] = new Knight(false);\n    squares[7][0] = new Knight(false);\n    squares[1][8] = new Knight(true);\n    squares[7][8] = new Knight(true);\n\n    squares[2][0] = new Silver(false);\n    squares[6][0] = new Silver(false);\n    squares[2][8] = new Silver(true);\n    squares[6][8] = new Silver(true);\n\n    squares[3][0] = new Gold(false);\n    squares[5][0] = new Gold(false);\n    squares[3][8] = new Gold(true);\n    squares[5][8] = new Gold(true);\n\n    squares[1][1] = new Bishop(false);\n    squares[7][7] = new Bishop(true);\n\n    squares[7][1] = new Rook(false);\n    squares[1][7] = new Rook(true);\n\n    squares[4][0] = new King(false);\n    squares[4][8] = new King(true);\n  }\n  else{\n\n  }\n  return squares;\n}\n\nexport function set_piece(n: number, is_black: boolean): Piece{\n  let piece: Piece = new Mt();\n  if(n === 0) piece = new Rook(is_black);\n  if(n === 1) piece = new Bishop(is_black);\n  if(n === 2) piece = new Gold(is_black);\n  if(n === 3) piece = new Silver(is_black);\n  if(n === 4) piece = new Knight(is_black);\n  if(n === 5) piece = new Lance(is_black);\n  if(n === 6) piece = new Pawn(is_black);\n  return piece;\n}\n\nexport function set_pieces(): number[]{\n  let numbers: number[] = new Array<number>(Setting.WHITE).fill(0);\n  return numbers;\n}\n\nexport function set_kifu(): Array<number>{\n  let kifu: Array<number> = [];\n  return kifu;\n}\n\nexport function set_control_piece(flag: boolean = false): boolean[][]{\n  let control_piece: boolean[][] = [];\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    control_piece[i] = new Array<boolean>(Setting.LENGTH).fill(flag);\n  }\n  return control_piece;\n}\n\n// ある駒の利きを列挙\n// 手番の駒のマスは移動するときにはじいているため、ここではそのマスも利きに入れてしまう\n// ただし飛び道具はすり抜けしないために正しい効きを列挙する\nfunction control_pos_sub(control_pos: number[][], pos: Piece[][], turn: boolean, x: number, y: number, kingx: number = -1, kingy: number = -1, check_king: boolean = true): void{\n  let num: number = pos[x][y].piece_num();\n  // 歩\n  if(num === 6){\n    if(turn ? y !== 0 : y !== Setting.LENGTH - 1){\n      let yy = (turn ? y - 1 : y + 1);\n      ++control_pos[x][yy];\n      // 王手をしているか\n      if(x === kingx && yy === kingy){\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n        control_pos[Setting.LENGTH][1] = num;\n      }\n    }\n    return;\n  }\n  if(num === 2 || num === 3 || num === 4 || num === 7 || (11 <= num && num <= 14)){\n    let dx: number[];\n    let dy: number[];\n    // 桂\n    if(num === 4){\n      dx = new Array<number>(-1, 1);\n      dy = new Array<number>(-2, -2);\n    }\n    // 銀\n    else if(num === 3){\n      dx = new Array<number>(-1, 0, 1, 1, -1);\n      dy = new Array<number>(-1, -1, -1, 1, 1);\n    }\n    // 金、と、杏、圭、全\n    else if(num === 2 || (11 <= num && num <= 14)){\n      dx = new Array<number>(-1, 0, 1, 1, 0, -1);\n      dy = new Array<number>(-1, -1, -1, 0, 1, 0);\n    }\n    // 玉\n    else{\n      if(check_king){\n        dx = new Array<number>(-1, 0, 1, 1, 1, 0, -1, -1);\n        dy = new Array<number>(-1, -1, -1, 0, 1, 1, 1, 0);\n      }\n      else{\n        dx = new Array<number>(0);\n        dy = new Array<number>(0);\n      }\n    }\n    for(let i = 0; i< dx.length; ++i){\n      let xx = (turn ? x + dx[i] : x - dx[i]);\n      let yy = (turn ? y + dy[i] : y - dy[i]);\n      if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\n        ++control_pos[xx][yy];\n        // 王手をしているか\n        if(xx === kingx && yy === kingy){\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n          control_pos[Setting.LENGTH][1] = num;\n        }\n      }\n    }\n    return;\n  }\n  // 香\n  if(num === 5){\n    let dy: number = -1;\n    let yy = (turn ? y + dy : y - dy);\n    while(0 <= yy && yy < Setting.LENGTH){\n      ++control_pos[x][yy];\n      // 王手をしているか\n      if(x === kingx && yy === kingy){\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n        control_pos[Setting.LENGTH][1] = num;\n      }\n      // 空きマスでなければ終わり\n      // ただし相手玉なら終わらない\n      if(pos[x][yy].piece_num() !== Setting.MT && !(pos[x][yy].piece_num() === 7 && pos[x][yy].turn() !== turn)){\n        break;\n      }\n      yy = (turn ? yy + dy : yy - dy);\n    }\n    return;\n  }\n  // 飛と角は手番で動きが変わらない！（対称）\n  // 角\n  if(num === 1 || num === 9){\n    let dx: number[] = new Array<number>(-1, 1, 1, -1);\n    let dy: number[] = new Array<number>(-1, -1, 1, 1);\n    for(let i = 0; i < dx.length; ++i){\n      let xx = x + dx[i];\n      let yy = y + dy[i];\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\n        ++control_pos[xx][yy];\n        // 王手をしているか\n        if(xx === kingx && yy === kingy){\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n          control_pos[Setting.LENGTH][1] = num;\n        }\n        // 空きマスでなければ終わり\n        // ただし相手玉なら終わらない\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\n          break;\n        }\n        xx += dx[i];\n        yy += dy[i];\n      }\n    }\n    // 馬の場合は上下左右も\n    if(num === 9){\n      dx = new Array<number>(0, 1, 0, -1);\n      dy = new Array<number>(-1, 0, 1, 0);\n      for(let i = 0; i< dx.length; ++i){\n        let xx = x + dx[i];\n        let yy = y + dy[i];\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\n          ++control_pos[xx][yy];\n          // 王手をしているか\n          if(xx === kingx && yy === kingy){\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n            control_pos[Setting.LENGTH][1] = num;\n          }\n        }\n      }\n    }\n    return;\n  }\n  // 飛\n  if(num === 0 || num === 8){\n    let dx: number[] = new Array<number>(0, 1, 0, -1);\n    let dy: number[] = new Array<number>(-1, 0, 1, 0);\n    for(let i = 0; i < dx.length; ++i){\n      let xx = x + dx[i];\n      let yy = y + dy[i];\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\n        ++control_pos[xx][yy];\n        // 王手をしているか\n        if(xx === kingx && yy === kingy){\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n          control_pos[Setting.LENGTH][1] = num;\n        }\n        // 空きマスでなければ終わり\n        // ただし相手玉なら終わらない\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\n          break;\n        }\n        xx += dx[i];\n        yy += dy[i];\n      }\n    }\n    // 竜の場合は斜めも\n    if(num === 8){\n      dx = new Array<number>(-1, 1, 1, -1);\n      dy = new Array<number>(-1, -1, 1, 1);\n      for(let i = 0; i< dx.length; ++i){\n        let xx = x + dx[i];\n        let yy = y + dy[i];\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\n          ++control_pos[xx][yy];\n          // 王手をしているか\n          if(xx === kingx && yy === kingy){\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\n            control_pos[Setting.LENGTH][1] = num;\n          }\n        }\n      }\n    }\n    return;\n  }\n}\n\n// 駒の利きを列挙\n// 一つの駒を指定することもできる\n// ついでに王手をかけている駒の位置も返す\nfunction control_pos(pos: Piece[][], turn: boolean, x: number = -1, y: number = -1, kingx: number = -1, kingy: number = -1, check_king: boolean = true): number[][]{\n  let control_pos: number[][] = [];\n  for(let i = 0; i < Setting.LENGTH + 1; ++i){\n    control_pos[i] = new Array<number>(Setting.LENGTH).fill(0);\n  }\n  if(x !== -1){\n    control_pos_sub(control_pos, pos, turn, x, y);\n    return control_pos;\n  }\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    for(let j = 0; j < Setting.LENGTH; ++j){\n      if(pos[i][j].piece_num() !== Setting.MT && pos[i][j].turn() === turn){\n        control_pos_sub(control_pos, pos, turn, i, j, kingx, kingy, check_king);\n      }\n    }\n  }\n  return control_pos;\n}\n\n// 王手がかかっているか\nfunction check(pos: Piece[][], turn: boolean, x: number = -1, y : number = -1): boolean{\n  // 玉の位置\n  if(x === -1){\n    for(let i = 0; i < Setting.LENGTH; ++i){\n      for(let j = 0; j < Setting.LENGTH; ++j){\n        if(pos[i][j].piece_num() === 7 && pos[i][j].turn() === turn){\n          x = i;\n          y = j;\n          i = Setting.LENGTH;\n          j = Setting.LENGTH;\n          break;\n        }\n      }\n    }\n  }\n  // 効いているマス\n  let atc_controls: number[][] = control_pos(pos, !turn, -1, -1, x, y);\n  // 王手をかけている駒の数\n  let cnt: number = atc_controls[x][y];\n  return cnt > 0;\n}\n\n// 詰んでいるか\nfunction mate(pos: Piece[][], captured: number[], turn: boolean): boolean{\n  let tmp_pos = _.cloneDeep(pos);\n  // 玉の位置\n  let x: number = -1;\n  let y: number = -1;\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    for(let j = 0; j < Setting.LENGTH; ++j){\n      if(tmp_pos[i][j].piece_num() === 7 && tmp_pos[i][j].turn() === turn){\n        x = i;\n        y = j;\n        i = Setting.LENGTH;\n        j = Setting.LENGTH;\n        break;\n      }\n    }\n  }\n  // 効いているマス\n  let atc_controls: number[][] = control_pos(tmp_pos, !turn, -1, -1, x, y);\n  // 王手をかけている駒の数\n  let cnt: number = atc_controls[x][y];\n  // 王手されていなければ明らかに詰んでいない\n  if(cnt === 0){\n    return false;\n  }\n  // 今いるマス及び周りのマスで王手がかかるか\n  // 玉自身で王手をかけている駒を取る場合を含む\n  let dx: number[] = new Array<number>(1, 1, 0, -1, -1, -1, 0, 1);\n  let dy: number[] = new Array<number>(0, 1, 1, 1, 0, -1, -1, -1);\n  for(let i = 0; i < dx.length; ++i){\n    let xx = x + dx[i];\n    let yy = y + dy[i];\n    if(xx < 0 || Setting.LENGTH <= xx || yy < 0 || Setting.LENGTH <= yy){\n      continue;\n    }\n    // 自分の駒があるとダメ\n    if(tmp_pos[xx][yy].piece_num() !== Setting.MT && tmp_pos[xx][yy].turn() === turn){\n      continue;\n    }\n    // 逃げられるマスがあれば詰んでいない\n    if(atc_controls[xx][yy] === 0){\n      return false;\n    }\n  }\n  // 2つ以上の駒から王手されている場合は逃げられなければ明らかにダメ\n  if(cnt > 1){\n    return true;\n  }\n  // 王手をかけている駒の位置\n  const atc = atc_controls[Setting.LENGTH][0];\n  const atcx: number = Math.floor(atc / Setting.LENGTH);\n  const atcy: number = atc % Setting.LENGTH;\n  // 王手をかけている駒の種類\n  const num: number = atc_controls[Setting.LENGTH][1];\n  const piece = tmp_pos[atcx][atcy];\n  // 1. 王手をかけている駒を（玉以外で）取れるか\n  // 玉で取れる場合はここではチェックしなくてよい\n  // 2. 桂馬以外の飛び道具で王手されているとき合い駒できるか\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    for(let j = 0; j < Setting.LENGTH; ++j){\n      // 自分の駒かチェック\n      if(tmp_pos[i][j].turn() !== turn || tmp_pos[i][j].piece_num() === Setting.MT || tmp_pos[i][j].piece_num() === 7){\n        continue;\n      }\n      const tmp_controls = control_pos(tmp_pos, turn, i, j);\n      // 1.\n      if(tmp_controls[atcx][atcy]){\n        // 取ったときに王手がかかっていなければ詰んでいない\n        tmp_pos[atcx][atcy] = tmp_pos[i][j];\n        tmp_pos[i][j]=new Mt();\n        if(!check(tmp_pos, turn, x, y)){\n          return false;\n        }\n        tmp_pos[i][j] = tmp_pos[atcx][atcy];\n        tmp_pos[atcx][atcy] = piece;\n      }\n      // 2.\n      if(num === 0 || num === 1 || num === 5 || num === 8 || num === 9){\n        let dx: number = atcx - x;\n        let dy: number = atcy - y;\n        if(dx !== 0){\n          dx /= Math.abs(dx);\n        }\n        if(dy !== 0){\n          dy /= Math.abs(dy);\n        }\n        let xx: number = x + dx;\n        let yy: number = y + dy;\n        while(xx !== atcx || yy !== atcy){\n          // 移動合いできるか\n          if(tmp_controls[xx][yy] > 0){\n            tmp_pos[xx][yy] = tmp_pos[i][j];\n            tmp_pos[i][j]=new Mt();\n            // 王手がかかっていなければ詰んでいない\n            if(!check(tmp_pos, turn, x, y)){\n              return false;\n            }\n            tmp_pos[i][j] = tmp_pos[xx][yy];\n            // 駒があるところだと合い駒できないため、tmp_pos[xx][yy]は必ずMtである\n            tmp_pos[xx][yy] = new Mt();\n          }\n          xx += dx;\n          yy += dy;\n        }\n      }\n    }\n  }\n  // 持ち駒を使って合い駒できるか\n  if(num === 0 || num === 1 || num === 5 || num === 8 || num === 9){\n    let dx: number = atcx - x;\n    let dy: number = atcy - y;\n    if(dx !== 0){\n      dx /= Math.abs(dx);\n    }\n    if(dy !== 0){\n      dy /= Math.abs(dy);\n    }\n    let xx: number = x + dx;\n    let yy: number = y + dy;\n    while(xx !== atcx || yy !== atcy){\n      // 持ち駒で合い駒できるか\n      for(let i = 0; i < Setting.WHITE; ++i){\n        if(captured[i] === 0){\n          continue;\n        }\n        tmp_pos[xx][yy] = set_piece(i, turn);\n        if(can_move(pos, tmp_pos, captured, -1, -1, xx, yy, turn)){\n          // 二歩かどうかはチェックする必要がある\n          if(i === 6 && nifu(tmp_pos, xx, turn)){\n            tmp_pos[xx][yy] = new Mt();\n            continue;\n          }\n          return false;\n        }\n        tmp_pos[xx][yy] = new Mt();\n      }\n      xx += dx;\n      yy += dy;\n    }\n  }\n\n  return true;\n}\n\n// 動けるマスか\n// 動かす前の盤面、動かした後の盤面、移動前の位置、移動後の位置、手番\nfunction can_move(bfr_pos: Piece[][], cur_pos: Piece[][], captured: number[], xx: number, yy: number, x: number, y: number, turn: boolean): boolean{\n  let num: number = cur_pos[x][y].piece_num();\n  // 駒を打つときは行き所がないかと、打ち歩詰めのみをチェックすればよい\n  // 二歩は別でチェックする\n  if(xx === -1){\n    if(num === 4){\n      return (turn ? y > 1 : y < Setting.LENGTH - 1 - 1);\n    }\n    if(num === 5){\n      return (turn ? y !== 0 : y !== Setting.LENGTH - 1);\n    }\n    if(num === 6){\n      if((turn ? y === 0 : y === Setting.LENGTH - 1)){\n        return false;\n      }\n      // 打ち歩詰めかどうか\n      return !mate(cur_pos, captured, !turn);\n    }\n    return true;\n  }\n  // ルール通りの動きか調べる\n  // 香、角、飛は駒をすり抜けに注意\n  let controls: number[][] = control_pos(bfr_pos, turn, xx, yy);\n  return controls[x][y] > 0;\n}\n\n// 二歩かどうか\n// 打った筋だけ見ればよい\nfunction nifu(pos: Piece[][], x: number, turn: boolean): boolean{\n  let cnt = 0;\n  for(let i = 0; i < Setting.LENGTH; ++i){\n    if(pos[x][i].piece_num() === 6 && pos[x][i].turn() === turn){\n      ++cnt;\n    }\n  }\n  return cnt >= 2;\n}\n\ninterface IGameProps {\n  start_pos: Piece[][];\n  start_black_piece: number[];\n  start_white_piece: number[];\n  current_pos: Piece[][];\n  current_black_piece: number[];\n  current_white_piece: number[];\n  control_piece: boolean[][];\n  kifu: Array<number>;\n  turn: boolean;\n  moves: number;\n  moves_sub: number;\n  moves_max: number;\n  clicked_piece: number;\n  final_piece: number;\n  black_name: string;\n  white_name: string;\n  is_black: boolean;\n  moved_piece: number;\n  promotion: boolean;\n  resign: boolean;\n  result: boolean;\n  is_mobile: boolean;\n  is_online: boolean;\n}\n\ninterface IGameState {\n  // 開始局面\n  start_pos: Piece[][];\n  start_black_piece: number[];\n  start_white_piece: number[];\n  // 現局面\n  current_pos: Piece[][];\n  current_black_piece: number[];\n  current_white_piece: number[];\n  // 指し手の候補\n  control_piece: boolean[][];\n  // 棋譜\n  kifu: Array<number>;\n  // 先手番かどうか\n  turn: boolean;\n  // 手数\n  moves: number;\n  // 表示用の手数\n  moves_sub: number;\n  // 終局時の手数\n  moves_max: number;\n  // 掴んでいる駒\n  clicked_piece: number;\n  // 最後に動かした駒\n  final_piece: number;\n  // 先手の名前\n  black_name: string;\n  // 後手の名前\n  white_name: string;\n  // 自分が先手かどうか\n  is_black: boolean;\n  // 駒を成るときに使う移動先\n  moved_piece: number;\n  promotion: boolean;\n  // 投了メッセージを表示するか\n  resign: boolean;\n  // 結果メッセージ\n  result: boolean;\n  // スマホかどうか\n  is_mobile: boolean;\n  is_online: boolean;\n}\n\nexport class Game extends React.Component<IGameProps, IGameState> {\n  constructor(props: IGameProps){\n    super(props);\n    this.state = {\n      start_pos: this.props.start_pos,\n      start_black_piece: this.props.start_black_piece,\n      start_white_piece: this.props.start_white_piece,\n      current_pos: this.props.current_pos,\n      current_black_piece: this.props.current_black_piece,\n      current_white_piece: this.props.current_white_piece,\n      control_piece: this.props.control_piece,\n      kifu: this.props.kifu,\n      turn: this.props.turn,\n      moves: this.props.moves,\n      moves_sub: this.props.moves_sub,\n      moves_max: this.props.moves_max,\n      clicked_piece: this.props.clicked_piece,\n      final_piece: this.props.final_piece,\n      black_name: this.props.black_name,\n      white_name: this.props.white_name,\n      is_black: this.props.is_black,\n      moved_piece: this.props.moves,\n      promotion: this.props.promotion,\n      resign: this.props.resign,\n      result: this.props.result,\n      is_mobile: this.props.is_mobile,\n      is_online: this.props.is_online,\n    };\n    this.handlePromotion = this.handlePromotion.bind(this);\n    this.handleResign= this.handleResign.bind(this);\n    this.handleResultClose = this.handleResultClose.bind(this);\n  }\n\n  handleClick(i: number){\n    if(this.state.moves < 0){\n      return;\n    }\n    let clicked_piece: number = this.state.clicked_piece;\n    const turn = this.state.turn;\n    const is_online = this.state.is_online;\n    let tmp_pos = _.cloneDeep(this.state.current_pos);  // 動かした後の盤面\n    const current_black_piece = _.cloneDeep(this.state.current_black_piece);\n    const current_white_piece = _.cloneDeep(this.state.current_white_piece);\n    // 持ち駒をクリックしたとき\n    if(i < Setting.WHITE * 2){\n      if(clicked_piece === Setting.UNCLICKED){\n        if((turn ? (i < Setting.WHITE && current_black_piece[i] > 0) : (i >= Setting.WHITE && current_white_piece[i - Setting.WHITE] > 0 && !is_online))){\n          // 候補の列挙\n          // 駒を打つときは王手がかかっていないかと、行き所がないか、二歩、打ち歩詰めをチェックする\n          let tmp_control_piece = set_control_piece(true);\n          let num = (i >= Setting.WHITE ? i - Setting.WHITE : i);\n          for(let x = 0; x < Setting.LENGTH; ++x){\n            for(let y = 0; y < Setting.LENGTH; ++y){\n              // 駒がある場所は置けない\n              if(tmp_pos[x][y].piece_num() !== Setting.MT){\n                tmp_control_piece[x][y] = false;\n              }\n              else if(num === 4){\n                tmp_control_piece[x][y] = (turn ? y > 1 : y < Setting.LENGTH - 1 - 1);\n              }\n              else if(num === 5){\n                tmp_control_piece[x][y] = (turn ? y !== 0 : y !== Setting.LENGTH - 1);\n              }\n              else if(num === 6){\n                tmp_control_piece[x][y] = (turn ? y !== 0 : y !== Setting.LENGTH - 1);\n                tmp_pos[x][y] = set_piece(num, turn);\n                if(nifu(tmp_pos, x, turn)){\n                  tmp_control_piece[x][y] = false;\n                }\n                // 打ち歩詰めかどうか\n                // 前に敵玉がいるときだけチェックすればよい\n                if((turn ? (y > 1 && tmp_pos[x][y - 1].piece_num() === 7 && tmp_pos[x][y - 1].turn() !== turn) : (y < Setting.LENGTH - 1 && tmp_pos[x][y + 1].piece_num() === 7 && tmp_pos[x][y + 1].turn() !== turn))){\n                  if(mate(tmp_pos, (turn ? current_white_piece : current_black_piece), !turn)){\n                    tmp_control_piece[x][y] = false;\n                  }\n                }\n                // 盤面を戻す\n                tmp_pos[x][y] = new Mt();\n              }\n              if(tmp_control_piece[x][y]){\n                tmp_pos[x][y] = set_piece(num, turn);\n                tmp_control_piece[x][y] = !check(tmp_pos, turn);\n                tmp_pos[x][y] = new Mt();\n              }\n            }\n          }\n          this.setState({\n            control_piece: tmp_control_piece,\n            clicked_piece: i,\n          });\n        }\n        return;\n      }\n      this.setState({\n        clicked_piece: Setting.UNCLICKED,\n        control_piece: set_control_piece(),\n      });\n      return;\n    }\n\n    // 持ち駒の分を引く\n    let x: number = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\n    let y: number = (i - Setting.WHITE * 2) % Setting.LENGTH;\n    const current_pos = this.state.current_pos.concat();\n    // 駒を掴んでないとき\n    if(this.state.clicked_piece === Setting.UNCLICKED){\n      // 手番の駒以外はダメ\n      if(current_pos[x][y].piece_num() === Setting.MT || current_pos[x][y].turn() !== turn || (is_online && !turn)){\n        return;\n      }\n      // 候補の列挙\n      // 王手がかかっていないかのみをチャックすればよい\n      // 駒を成らないので候補に行き所がない駒が含まれることもあるが、チェックする必要はない\n      // これは適切な移動ならば行き所のない駒はできないため\n      let tmp_control_pos = control_pos(current_pos, turn, x, y, -1, -1, false);\n      let tmp_control_piece = set_control_piece(false);\n      for(let xx = 0; xx < Setting.LENGTH; ++xx){\n        for(let yy = 0; yy < Setting.LENGTH; ++yy){\n          if(tmp_control_pos[xx][yy] === 0){\n            continue;\n          }\n          // 手番の駒はダメ\n          if(current_pos[xx][yy].piece_num() !== Setting.MT && current_pos[xx][yy].turn() === turn){\n            continue;\n          }\n          let piece = tmp_pos[xx][yy];\n          tmp_pos[xx][yy] = tmp_pos[x][y];\n          tmp_pos[x][y] = new Mt();\n          tmp_control_piece[xx][yy] = !check(tmp_pos, turn);\n          tmp_pos[x][y] = tmp_pos[xx][yy];\n          tmp_pos[xx][yy] = piece;\n        }\n      }\n      this.setState({\n        control_piece: tmp_control_piece,\n        clicked_piece: i,\n      });\n      return;\n    }\n\n    // ここでは必ず盤面をクリックしている\n    let current_control_piece = this.state.control_piece;\n    // 候補になかったらダメ\n    if(!current_control_piece[x][y]){\n      this.setState({\n        control_piece: set_control_piece(),\n        clicked_piece: Setting.UNCLICKED,\n      });\n      return;\n    }\n\n    // 以下では正しい指し手であることが保証されている\n    const moves = this.state.moves;\n    let tmp_black_piece = _.cloneDeep(current_black_piece);\n    let tmp_white_piece = _.cloneDeep(current_white_piece);\n    let xx: number = -1;\n    let yy: number = -1;\n    // 持ち駒を掴んでいるとき\n    if(clicked_piece < Setting.WHITE * 2){\n      // 先手の駒を掴んでいる場合\n      // 掴むときに手番かチェックしているので、ここではチェックしなくてよい\n      if(turn){\n        // 持ち駒の更新\n        --tmp_black_piece[clicked_piece];\n         // 盤面の更新\n        tmp_pos[x][y] = set_piece(clicked_piece, turn);\n      }\n      else{\n        // 持ち駒の更新\n        --tmp_white_piece[clicked_piece - Setting.WHITE];\n         // 盤面の更新\n        tmp_pos[x][y] = set_piece(clicked_piece - Setting.WHITE, turn);\n      }\n    }\n    else{\n      // 持ち駒の分を引く\n      xx = Math.floor((clicked_piece - Setting.WHITE * 2) / Setting.LENGTH);\n      yy = (clicked_piece- Setting.WHITE * 2) % Setting.LENGTH;\n      let piece = tmp_pos[x][y];\n      // 盤面の更新\n      tmp_pos[x][y] = tmp_pos[xx][yy];\n      tmp_pos[xx][yy] = new Mt();\n      // 持ち駒の更新\n      let num: number = piece.piece_num();\n      if(num !== Setting.MT){\n        // 成っている駒を生に戻す\n        if(num > Setting.WHITE){\n          num -= Setting.MT / 2;\n        }\n        turn ? ++tmp_black_piece[num] : ++tmp_white_piece[num];\n      }\n    }\n\n    // 成れるときは聞く\n    // 条件：盤面から3段目に移動または3段目から移動するときで、金と玉以外の成っていない駒のとき\n    let num: number = tmp_pos[x][y].piece_num();\n    let is_promoted: Boolean = false;\n    if(xx !== -1 && (turn ? (y < 3 || yy < 3) : (y > Setting.LENGTH - 1 - 3 || yy > Setting.LENGTH - 1 - 3)) && num < Setting.WHITE && Setting.PIECES[num + Setting.MT / 2] !== \"\"){\n      // 必ず成るときは聞かずに成る\n      // 歩、香の1段目、桂の1,2段目\n      if(5 <= num && num <= 6){\n        if((turn ? y === 0 : y === Setting.LENGTH - 1)){\n          tmp_pos[x][y].promote();\n          is_promoted = true;\n        }\n      }\n      else if(num === 4){\n        if((turn ? y < 2 : y > Setting.LENGTH - 1 - 2)){\n          tmp_pos[x][y].promote();\n          is_promoted = true;\n        }\n      }\n      if(!is_promoted){\n        this.setState({\n          moved_piece: i,\n          promotion: true,\n        });\n        return;\n      }\n    }\n    let kifu = this.state.kifu;\n    kifu = kifu.concat(clicked_piece);\n    kifu = kifu.concat(is_promoted ? (i + Setting.LENGTH * Setting.LENGTH) : i);\n    this.setState({\n      current_pos: tmp_pos,\n      current_black_piece: tmp_black_piece,\n      current_white_piece: tmp_white_piece,\n      control_piece: set_control_piece(),\n      kifu: kifu,\n      turn: !turn,\n      moves: moves + 1,\n      moves_sub: moves + 1,\n      clicked_piece: Setting.UNCLICKED,\n      final_piece: i,\n    });\n    // 詰んでいたら対局終了\n    if(mate(tmp_pos, (turn ? tmp_white_piece : tmp_black_piece), !turn)){\n      setTimeout(() => {\n        this.setState({\n          result: true,\n        });\n      }, 200);\n      this.setState({\n        moves: -1,\n        moves_max: moves + 1,\n      });\n      return;\n    }\n  }\n\n  resign(){\n    const moves: number = this.state.moves;\n    if(moves < 0){\n      return;\n    }\n    this.setState({\n      resign: true,\n    });\n  }\n\n  rotate(){\n    this.setState({\n      is_black: !this.state.is_black,\n      clicked_piece: Setting.UNCLICKED,\n      control_piece: set_control_piece(),\n    });\n    return;\n  }\n\n  handlePromotion(is_promoted: boolean){\n    // 正しい動きであることは保証されている\n    let clicked_piece: number = this.state.clicked_piece;\n    const turn = this.state.turn;\n    let tmp_pos = _.cloneDeep(this.state.current_pos);  // 動かした後の盤面\n    const current_black_piece = _.cloneDeep(this.state.current_black_piece);\n    const current_white_piece = _.cloneDeep(this.state.current_white_piece);\n    const moves = this.state.moves;\n    let tmp_black_piece = _.cloneDeep(current_black_piece);\n    let tmp_white_piece = _.cloneDeep(current_white_piece);\n    let xx: number = -1;\n    let yy: number = -1;\n    let i = this.state.moved_piece;\n    let x: number = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\n    let y: number = (i - Setting.WHITE * 2) % Setting.LENGTH;\n    // 持ち駒を掴んでいるとき\n    if(clicked_piece < Setting.WHITE * 2){\n      // 先手の駒を掴んでいる場合\n      if(turn){\n        // 持ち駒の更新\n        --tmp_black_piece[clicked_piece];\n         // 盤面の更新\n        tmp_pos[x][y] = set_piece(clicked_piece, turn);\n      }\n      else{\n        // 持ち駒の更新\n        --tmp_white_piece[clicked_piece - Setting.WHITE];\n         // 盤面の更新\n        tmp_pos[x][y] = set_piece(clicked_piece - Setting.WHITE, turn);\n      }\n    }\n    else{\n      // 持ち駒の分を引く\n      xx = Math.floor((clicked_piece - Setting.WHITE * 2) / Setting.LENGTH);\n      yy = (clicked_piece- Setting.WHITE * 2) % Setting.LENGTH;\n      let piece = tmp_pos[x][y];\n      // 盤面の更新\n      tmp_pos[x][y] = tmp_pos[xx][yy];\n      tmp_pos[xx][yy] = new Mt();\n      // 持ち駒の更新\n      let num: number = piece.piece_num();\n      if(num !== Setting.MT){\n        // 成っている駒を生に戻す\n        if(num > Setting.WHITE){\n          num -= Setting.MT / 2;\n        }\n        turn ? ++tmp_black_piece[num] : ++tmp_white_piece[num];\n      }\n    }\n    if(is_promoted){\n      tmp_pos[x][y].promote();\n    }\n    let kifu = this.state.kifu;\n    kifu = kifu.concat(clicked_piece);\n    kifu = kifu.concat(is_promoted ? (i + Setting.LENGTH * Setting.LENGTH) : i);\n    this.setState({\n      current_pos: tmp_pos,\n      current_black_piece: tmp_black_piece,\n      current_white_piece: tmp_white_piece,\n      control_piece: set_control_piece(),\n      kifu: kifu,\n      turn: !turn,\n      moves: moves + 1,\n      moves_sub: moves + 1,\n      clicked_piece: Setting.UNCLICKED,\n      final_piece: i,\n      moved_piece: Setting.UNCLICKED,\n      promotion: false,\n    });\n    // 詰んでいたら対局終了\n    if(mate(tmp_pos, (turn ? tmp_white_piece : tmp_black_piece), !turn)){\n      setTimeout(() => {\n        this.setState({\n          result: true,\n        });\n      }, 200);\n      this.setState({\n        moves: -1,\n        moves_max: moves + 1,\n      });\n      return;\n    }\n  }\n\n  handleResign(resign: boolean){\n    const moves = this.state.moves;\n    if(resign){\n      setTimeout(() => {\n        this.setState({\n          result: true,\n        });\n      }, 200);\n      this.setState({\n        moves: -1,\n        moves_max: moves,\n        clicked_piece: Setting.UNCLICKED,\n        control_piece: set_control_piece(),\n        resign: false,\n      });\n    }\n    else{\n      this.setState({\n        resign: false,\n      });\n    }\n  }\n\n  handleResultClose(){\n    this.setState({\n      result: false,\n    });\n  }\n\n  // kifuの不正な指し手はないので手のチェックはしない\n  setBoard(target_moves: number){\n    if(target_moves < 0){\n      target_moves = 0;\n    }\n    if(target_moves > this.state.moves_max){\n      target_moves = this.state.moves_max;\n    }\n    let cur = 0;\n    let idx = 0;\n    const kifu = this.state.kifu;\n    let tmp_pos = _.cloneDeep(this.state.start_pos);\n    let tmp_black_piece = _.cloneDeep(this.state.start_black_piece);\n    let tmp_white_piece = _.cloneDeep(this.state.start_white_piece);\n    let clicked_piece = Setting.UNCLICKED;\n    let final_piece = Setting.UNCLICKED;\n    let turn = true;\n    while(cur < target_moves){\n      let i = kifu[idx];\n      // 駒を掴んでいないとき\n      if(clicked_piece === Setting.UNCLICKED){\n        clicked_piece = kifu[idx];\n        ++idx;\n        continue;\n      }\n      // 持ち駒を掴んでいるとき\n      if(clicked_piece < Setting.WHITE * 2){\n        const x = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\n        const y = (i - Setting.WHITE * 2) % Setting.LENGTH;\n        // 先手の駒を掴んでいる場合\n        if(turn){\n          --tmp_black_piece[clicked_piece];\n          // 盤面の更新\n          tmp_pos[x][y] = set_piece(clicked_piece, turn);\n        }\n        else{\n          // 持ち駒の更新\n          --tmp_white_piece[clicked_piece - Setting.WHITE];\n          // 盤面の更新\n          tmp_pos[x][y] = set_piece(clicked_piece - Setting.WHITE, turn);\n        }\n        clicked_piece = Setting.UNCLICKED;\n        final_piece = i;\n        turn = !turn;\n        ++cur;\n        ++idx;\n        continue;\n      }\n      // 持ち駒の分を引く\n      // 成りフラグをチェック\n      let promoted_flag = false;\n      if(i >= Setting.LENGTH * Setting.LENGTH + Setting.WHITE  *2){\n        promoted_flag = true;\n        i -= Setting.LENGTH * Setting.LENGTH;\n      }\n      const x = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\n      const y = (i - Setting.WHITE * 2) % Setting.LENGTH;\n      const xx = Math.floor((clicked_piece - Setting.WHITE * 2) / Setting.LENGTH);\n      const yy = (clicked_piece - Setting.WHITE * 2) % Setting.LENGTH;\n      let piece = tmp_pos[x][y];\n      // 盤面の更新\n      tmp_pos[x][y] = tmp_pos[xx][yy];\n      tmp_pos[xx][yy] = new Mt();\n      // 持ち駒の更新\n      let num: number = piece.piece_num();\n      if(num !== Setting.MT){\n        // 成っている駒を生に戻す\n        if(num > Setting.WHITE){\n          num -= Setting.MT / 2;\n        }\n        turn ? ++tmp_black_piece[num] : ++tmp_white_piece[num];\n      }\n      if(promoted_flag){\n        tmp_pos[x][y].promote();\n      }\n      clicked_piece = Setting.UNCLICKED;\n      final_piece = i;\n      turn = !turn;\n      ++cur;\n      ++idx;\n    }\n    this.setState({\n      current_pos: tmp_pos,\n      current_black_piece: tmp_black_piece,\n      current_white_piece: tmp_white_piece,\n      final_piece: final_piece,\n      moves_sub: target_moves,\n      turn: turn,\n    });\n  }\n\n  render() {\n    let game: string = \"game-info space\";\n    if(!this.state.is_black){\n      game += \" white\";\n    }\n    const moves = this.state.moves_sub;\n    const legend = (this.state.is_black ? `△${this.state.white_name}　▲${this.state.black_name}` : `▲${this.state.black_name}　△${this.state.white_name}`);\n    const moves_max = this.state.moves_max;\n\n    const is_mobile = this.state.is_mobile;\n\n    const font_size = (is_mobile ? 'small' : 'large');\n    const button_size = (is_mobile ? 'small' : 'medium');\n\n    const back10 = (this.state.moves === -1 && moves > 0 ?\n      <Button variant=\"contained\" onClick={() => this.setBoard(moves - 10)}>\n        <Replay10OutlinedIcon fontSize={font_size}/>\n      </Button>\n      :\n      <Button variant=\"contained\" disabled onClick={() => this.setBoard(moves - 10)}>\n        <Replay10OutlinedIcon fontSize={font_size}/>\n      </Button>\n      );\n    const back1 = (this.state.moves === -1 && moves > 0 ?\n      <Button variant=\"contained\" onClick={() => this.setBoard(moves - 1)}>\n        <ArrowBackIosIcon fontSize={font_size}/>\n      </Button>\n      :\n      <Button variant=\"contained\" disabled onClick={() => this.setBoard(moves - 1)}>\n        <ArrowBackIosIcon fontSize={font_size}/>\n      </Button>\n      );\n    const forward1 = (this.state.moves === -1 && moves < this.state.moves_max ?\n      <Button variant=\"contained\" onClick={() => this.setBoard(moves + 1)}>\n        <ArrowForwardIosIcon fontSize={font_size}/>\n      </Button>\n      :\n      <Button variant=\"contained\" disabled onClick={() => this.setBoard(moves + 1)}>\n        <ArrowForwardIosIcon fontSize={font_size}/>\n      </Button>\n      );\n    const forwad10 = (this.state.moves === -1 && moves < this.state.moves_max ?\n      <Button variant=\"contained\" onClick={() => this.setBoard(moves + 10)}>\n        <Forward10OutlinedIcon fontSize={font_size}/>\n      </Button>\n      :\n      <Button variant=\"contained\" disabled onClick={() => this.setBoard(moves + 10)}>\n        <Forward10OutlinedIcon fontSize={font_size}/>\n      </Button>\n    );\n    if(is_mobile){\n      return (\n        <div className=\"game-info\">\n          <div className=\"game\">\n            <div className=\"game-sub\">\n            {this.state.moves >= 0 &&\n              <div className=\"mobile-button\">\n                <Button variant=\"contained\" color=\"secondary\" size={button_size} onClick={() => this.resign()}>\n                  投了\n                </Button>\n              </div>\n            }\n              <div className=\"mobile-button\">\n                <Button variant=\"contained\" color=\"primary\" size={button_size} onClick={() => this.rotate()} >\n                  反転\n                </Button>\n              </div>\n            </div>\n            {this.state.moves === -1 && moves_max > 0 &&\n              <div className=\"mobile-button\">\n                <Button variant=\"contained\" size={button_size} color=\"inherit\" onClick={() => this.setBoard(0)}>\n                  開始局面\n                </Button>\n              </div>\n            }\n            {this.state.moves === -1 && moves_max > 0 &&\n              <div className=\"mobile-button\">\n                <Button variant=\"contained\" size={button_size} color=\"inherit\" onClick={() => this.setBoard(moves_max)}>\n                  終局図\n                </Button>\n              </div>\n            }\n            <div className=\"center bold\">\n              {legend}\n            </div>\n            <div className=\"center\">\n              {back1}\n              &nbsp;\n              {moves}手目\n              &nbsp;\n              {forward1}\n            </div>\n            <div className={game}>\n              <div className=\"mobile-game-info-white white\">\n                <div>{\"△\"}</div>\n                <Captured\n                  squares={this.state.current_white_piece}\n                  clicked_piece={this.state.clicked_piece}\n                  is_black={false}\n                  turn={this.state.turn}\n                  onClick={i => this.handleClick(i)}\n                  is_mobile={is_mobile}\n                />\n              </div>\n              <div>\n                <Board\n                  squares={this.state.current_pos}\n                  onClick={i => this.handleClick(i)}\n                  clicked_piece={this.state.clicked_piece}\n                  control_piece={this.state.control_piece}\n                  final_piece={this.state.final_piece}\n                  is_mobile={is_mobile}\n                />\n              </div>\n              <div className=\"mobile-game-info-black\">\n                <div>{\"▲\"}</div>\n                <Captured\n                  squares={this.state.current_black_piece}\n                  clicked_piece={this.state.clicked_piece}\n                  is_black={true}\n                  turn={this.state.turn}\n                  onClick={i => this.handleClick(i)}\n                  is_mobile={is_mobile}\n                />\n              </div>\n            </div>\n          </div>\n          <Confirm\n            title={\"成りますか？\"}\n            message={\"\"}\n            open={this.state.promotion}\n            handleYes={() => this.handlePromotion(true)}\n            handleNo={() => this.handlePromotion(false)}\n          />\n          <Confirm\n            title={\"投了しますか？\"}\n            message={\"\"}\n            open={this.state.resign}\n            handleYes={() => this.handleResign(true)}\n            handleNo={() => this.handleResign(false)}\n          />\n          <Alert\n            title={`まで${moves}手にて${(this.state.turn ? this.state.white_name : this.state.black_name)}の勝ちです！`}\n            message={\"\"}\n            open={this.state.result}\n            handleClose={this.handleResultClose}\n          />\n        </div>\n      );\n    }\n    return (\n      <div className=\"game-info\">\n        <div className=\"game\">\n          <div className=\"center bold\">\n            {legend}\n          </div>\n          <div className=\"center\">\n            {back10}\n            &nbsp;\n            {back1}\n            &nbsp;\n            {moves}手目\n            &nbsp;\n            {forward1}\n            &nbsp;\n            {forwad10}\n          </div>\n          <div className={game}>\n            <div className=\"game-info-white white\">\n              <div>{\"△\"}</div>\n              <Captured\n                squares={this.state.current_white_piece}\n                clicked_piece={this.state.clicked_piece}\n                is_black={false}\n                turn={this.state.turn}\n                onClick={i => this.handleClick(i)}\n                is_mobile={is_mobile}\n              />\n            </div>\n            <div className=\"game-board\">\n              <Board\n                squares={this.state.current_pos}\n                onClick={i => this.handleClick(i)}\n                clicked_piece={this.state.clicked_piece}\n                control_piece={this.state.control_piece}\n                final_piece={this.state.final_piece}\n                is_mobile={is_mobile}\n              />\n            </div>\n            <div className=\"game-info-black\">\n              <div>{\"▲\"}</div>\n              <Captured\n                squares={this.state.current_black_piece}\n                clicked_piece={this.state.clicked_piece}\n                is_black={true}\n                turn={this.state.turn}\n                onClick={i => this.handleClick(i)}\n                is_mobile={is_mobile}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"game-sub\">\n          {this.state.moves >= 0 &&\n            <div className=\"button\">\n              <Button variant=\"contained\" color=\"secondary\" size={button_size} onClick={() => this.resign()}>\n                投了\n              </Button>\n            </div>\n          }\n          <div className=\"button\">\n            <Button variant=\"contained\" color=\"primary\" size={button_size} onClick={() => this.rotate()} >\n              反転\n            </Button>\n          </div>\n          {this.state.moves === -1 && moves_max > 0 &&\n            <div className=\"button\">\n              <Button variant=\"contained\" size={button_size} color=\"inherit\" onClick={() => this.setBoard(0)}>\n                開始局面\n              </Button>\n            </div>\n          }\n          {this.state.moves === -1 && moves_max > 0 &&\n            <div className=\"button\">\n              <Button variant=\"contained\" size={button_size} color=\"inherit\" onClick={() => this.setBoard(moves_max)}>\n                終局図\n              </Button>\n            </div>\n          }\n        </div>\n        <Confirm\n          title={\"成りますか？\"}\n          message={\"\"}\n          open={this.state.promotion}\n          handleYes={() => this.handlePromotion(true)}\n          handleNo={() => this.handlePromotion(false)}\n        />\n        <Confirm\n          title={\"投了しますか？\"}\n          message={\"\"}\n          open={this.state.resign}\n          handleYes={() => this.handleResign(true)}\n          handleNo={() => this.handleResign(false)}\n        />\n        <Alert\n          title={`まで${moves}手にて${(this.state.turn ? this.state.white_name : this.state.black_name)}の勝ちです！`}\n          message={\"\"}\n          open={this.state.result}\n          handleClose={this.handleResultClose}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Setting} from \"./setting\";\nimport {Game, make_board, set_kifu, set_pieces, set_control_piece} from './game';\n\nconst ua = navigator.userAgent.toLowerCase();\nconst is_mobile = (ua.match(/Mobile/) !== null) || (ua.match(/mobile/) !== null);\n\nReactDOM.render(\n  <Game\n    start_pos={make_board()}\n    start_black_piece={set_pieces()}\n    start_white_piece={set_pieces()}\n    current_pos={make_board()}\n    current_black_piece={set_pieces()}\n    current_white_piece={set_pieces()}\n    control_piece={set_control_piece()}\n    kifu={set_kifu()}\n    turn={true}\n    moves={0}\n    moves_sub={0}\n    moves_max={0}\n    clicked_piece={Setting.UNCLICKED}\n    final_piece={Setting.UNCLICKED}\n    black_name={\"先手\"}\n    white_name={\"後手\"}\n    is_black={true}\n    moved_piece={Setting.UNCLICKED}\n    promotion={false}\n    resign={false}\n    result={false}\n    is_mobile={is_mobile}\n    is_online={false}\n  />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}